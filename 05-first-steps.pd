# Pierwsze Kroki

Zobaczymy teraz jak uruchomić w Pythonie tradycyjny program 'Hello World'. Nauczy cię to jak pisać, zapisywać i uruchamiać programy Pythona.

Programy Pythona można uruchamiać na dwa sposoby - używając interpretera poleceń lub pliku źródłowego. Zobaczymy teraz jak używać obu metod.

## Użycie Interpretera Poleceń

Otwórz terminal twojego systemu operacyjnego (tak jak było to opisane w [Rozdziale Instalacja] (#installation)). Napisz `python3` i naciśnij `enter`. 

Kiedy uruchomisz `python3` powinieneś widzieć `>>>`. Tu możesz pisać komendy. To jest właśnie nazywane *Pythonowy Interpreter Poleceń*

Napisz w interpreterze `print('Hello World')` i naciśnij `enter`. Powinieneś widzieć słowa `Hello World` jako wynik. 

Oto przykład co powinieneś widzieć. Dane dotyczące programu Python mogą się różnić, ale część od `>>>` i dalej powinna być identyczna niezależnie od systemu operacyjnego.

~~~
$ python3
Python 3.3.0 (default, Oct 22 2012, 12:20:36)
[GCC 4.2.1 Compatible Apple Clang 4.0 ((tags/Apple/clang-421.0.60))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print('hello world')
hello world
>>> 
~~~

Zauważ, że Python daje Ci wynik natychmiast! To, co właśnie wprowadziłeś, to pojedyncze *wyrażenie* Pythona. Używamy `print` do wyświetlania wartości. Tutaj wprowadziliśmy tekst `Hello World` i został on natychmiast wyświetlony.

Jak wyjść z Interpretera

:   Jeśli używasz powłoki systemowej Linux-a lub Unix-a, możesz wyjść z Interpretera wciskając `ctrl-d` lub wpisująć `exit()` (uwaga: pamiętaj, żeby dołączyć nawiasy, '()') i naciśnij `enter`. Jeśli używasz linii poleceń Windows, wciśnij `ctrl-z`, a następnie `enter`.

## Wybór Edytora

Nie możemy pisać naszych programów w Interpreterze za każdym razem gdy chcemy coś uruchomić. Musimy zapisać nasz program i móć go uruchamiać wiele razy.

Żeby stworzyć plik źródłowy Pythona, potrzebujemy program do edycji, gdzie będziemy mogli pisać i zapisywać. Dobry edytor dla programistów ułatwi ci życie w pisaniu plików źródłowych. Dlatego wybór edytora jest bardzo istotny. Musisz wybrać edytor tak jak wybierasz samochód. Dobry edytor pomoże ci pisać programy Pythona łatwiej. Uczyni twoją podróż bardziej komfortową i pomoże ci osiągnąć cel (metę) znacznie szybciej i bezpieczniej.

Jednym z podstawowych wymagań jest *wyróżnianie składni* gdzie wszystkie różne części twojego programu Python są kolorowane. W ten sposób możesz *widzieć* twój program i wizualizować (wyobrażać sobie) jego działanie.

Jeśli nie wiesz jak i gdzie wystartować, mogę ci zarekomendować użycie [Komodo Edit](http://www.activestate.com/komodo-edit/downloads) program, który jest dostępny na Windows, Mac OS X i Linux.

Jeśli używasz Windows, **do not use Notepad** - to jest zły wybór ponieważ nie obsługuje on wyróżniania składni i co ważniejsze nie wspiera wcięć tekstu, co jest niezwykle ważne w naszym przypadku, co zobaczymy później. Dobry edytor taki jak Komodo Edit będzie to robił automatycznie.

Jeśli jesteś doświadczonym programistą, zapewne używasz [Vim](http://www.vim.org/) lub [Emacs](http://www.gnu.org/software/emacs/). Nie trzeba dodawać, że te dwa programy są najpotężniejszymi edytorami i będziesz miał korzyści z używania ich w pisaniu programów Python. Personalnie używam obu do pisania większości moich programów. Napisałem nawet [całą książkę o Vim](http://www.swaroopch.com/notes/vim). Jeśli chciałbyś poświęcić czas na naukę Vim lub Emacs, to ja rekomenduję ci nauczyć się obu. Umiejętność ta będzie użyteczna na długi czas. Jednak tak jak wcześniej wspomniałem, początkujący mogą rozpocząć z Komodo Edit i skupić w tym momencie swoją naukę raczej na Pytonie niż na edytorze. 

Powtarzam, proszę wybierz odpowiedni edytor - pozwoli ci to pisać programy Python łatwiej i zabawniej.

Dla użytkowników Vim

:   Jest dobre wprowadzenie jak [zrobić z Vim-a potężny IDE Pythona - John M Anderson](http://blog.sontek.net/blog/detail/turning-vim-into-a-modern-python-ide). Także godne uwagi jest [jedi-vim plugin](https://github.com/davidhalter/jedi-vim) i moje własne [konfiguracja dotvim](https://github.com/swaroopch/dotvim).

Dla użytkowników Emacs
:   Jest dobre wprowadzenie jak [zrobić z Emacs a potężny IDE Pythona - Pedro Kroger](http://pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/). Także godne uwagi jest [konfiguracja dotemacs](https://github.com/ghoseb/dotemacs).

## Używanie plików źródłowych

Teraz wróćmy do programowania. Jest pewną tradycją, że kiedykowiek uczysz się języka programowania, pierwszy program, który piszesz i uruchamiasz to 'Hello World' - wszystko co on robi to poprostu mówi 'Hello World' kiedy go uruchomisz.

Uruchom wybrany przez ciebie edytor, wprowadź następjący program i zapisz go jako `hello.py`.

Jeśli używasz Komodo Edit, kliknij na `File` --- `New` --- `New File`, napisz następjące linijki:

~~~python
print('Hello World')
~~~

W Komodo Edit, wykonaj `File` --- `Save` żeby zapisać plik.

Gdzie powinieneś zapisać plik? W jakimkolwiek katalogu, do którego znasz lokalizację. Jeśli nie rozumiesz co to znaczy, stwórz nowy katalog użyj tej lokalizacji do zapisywania i uruchamiania wszystkich twoich programów Pythona.

- `C:\\py` on Windows
- `/tmp/py` on Linux
- `/tmp/py` on Mac OS X

Żeby stworzyć katalog użyj  komendy `mkdir` w terminalu. Np. `mkdir /tmp/py`

Ważne

:   Zawsze upewnij się, że dodajesz rozszeżenie `.py`, np. `foo.py`.

W Komodo Edit kliknij na `Tools` --- `Run Command`, napisz `python3 hello.py` i kliknij na `Run`. Powinieneś widzieć wynik podobny do pokazanego na poniższym screenshot-cie. 

![Screenshot of Komodo Edit with the Hello World program](assets/komodo-edit-hello-world.png)

Najlepiej po prostu wpisać w Komodo Edit, ale użyć terminala:

#. Otwórz terminal jak wyjaśniono w [Rozdziale Instalacja](#installation).
#. Zmień katalog na taki gdzie zapisałeś plik, np. `cd /tmp/py`
#. Uruchom program przez wprowadzenie komendy `python3 hello.py`

Wyjście jest tak jak pokazano poniżej.

~~~
$ python3 hello.py
Hello World
~~~

Jeśli otrzymałeś wyjście takie jak pokazane powyżej, gratulacje! - pomyślnie uruchomiłeś twój pierwszy program Python. Pomyślnie przekroczyłeś najtrudniejszą część nauki programowania, to jest, rozpoczęcie pracy z pierwszym programem!

Jeśli otrzymałeś błąd, proszę napisz powyższy program *dokładnie* jak jest pokazane powyżej i uruchom program jeszcze raz. Zauważ, że Python rozróżnia wielkość liter. Np. `print` to nie to samo co `Print` - w pierwszym przypadku mamy małe `p`, w drugim dużą literę `P`. Ponadto, upewnij się, że nie ma żadnych spacji i tabulacji przed pierwszym znakiem każdej linii - zobaczymy później dlaczego [jest to tak ważne](#indentation) 

**Jak to działa**
Program Python składa się z *wyrażeń*. W twoim pierwszym prgramie mamy tylko jedno wyrażenie. W tym wyrażeniu wywołujemy *funkcję* `print`, która tylko wypisuje tekst `'Hello World'`. Będziemy uczyli się o funkcjach szczegółowo w [późniejszym rodziale](#functions). To co powinieneś zrozumieć teraz, to - cokolwiek dostarczysz w nawiasach będzie wypisane na ekranie. W tym przypadku dostarczamy tekst `"Hello World"`. 

### Wykonywalny Program Python

To dotyczy tylko użytkowników Linuxa i Unixa, ale użytkownicy powinni również to wiedzieć.

Za każdym razem gdy chcesz uruchomić program Pythona, musimy jawnie wywołać `python3 foo.py`, ale dlaczego nie możemy uruchomić go tak jak inny program na naszym komputerze? Możemy to osiągnąć przez użycie czegoś co nazywamy linię *hashbang*.

Dodaj poniższą linie jako *pierwszą* w twoim programie:

~~~python
#!/usr/bin/env python3
~~~

A więc twój program powinien wygląć tak:

~~~python
#!/usr/bin/env python3
print('Hello World')
~~~

Po drugie, musimy nadać programowi uprawnienia wykonywalności. Użyjemy do tego komendy `chmod`.

Komenda chmod jest użyta tu do zmiany trybu pliku nadanie uprawnienia wykonywalności dla wszystkich użytkowników systemu. 

~~~
$ chmod a+x hello.py
~~~

Teraz możemy uruchomić nasz program bezpośrednio ponieważ nasz system operacyjny wywoła '/usr/bin/env', który z kolei znajdzie `Python 3` a ten wie jak uruchomić nasz prgram źródłowy:

~~~
$ ./hello.py
Hello World
~~~

Użyliśmy `./` aby wskazać, że program znajduje się w obecnym katalogu.

Żeby uczynić rzeczy bardziej zabawne, możesz zmienić nazwę pliku na po prostu `hello` i uruchomić go jako `./hello`. Będzie on nadal działał dopóki system wie, że musi uruchomić program używająć interpretera wyspecyfikowanego w pierwszej linii pliku źródłowego.

A więc do tej pory byliśmy w stanie uruchomić nasz program dopóki znamy dokładną ścieżkę. Co jeśli chcemy uruchomić program z innego folderu? Możesz to zrobić przez umieszczenie programu w jednym z katalogów wymienionych w zmiennej środowiskowej `PATH`.

Gdziekolwiek uruchomisz jakikolwiek program, system szuka tego programu we wszystkich katalogach wymienionych w zmiennej środowiskowej `PATH` i uruchamia ten program. Możemy sprawić aby program był dostępny wszędzie przez proste skopiowanie pliku źródłowego do jednego z katalogów wymienionych w zmiennej środowiskowej `PATH`.

~~~
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/swaroop/bin
$ cp hello.py /home/swaroop/bin/hello
$ hello
Hello World
~~~

Możemy wyświetlić zmienną `PATH` używająć komenty `echo` i poprzedzić nazwę zmiennej znakiem `$` aby wskazać powłoce, że potrzebujemy wartość tej "zmiennej środowiskowej". Widzimy, że `/home/swaroop/bin` jest jednym z katalogów w zmiennej  PATH gdzie *swaroop* jest nazwą użytkownika jaką używam w moim systemie. W twoim systemie powinien być podobny katalog z twoją nazwą użytkownika.

Jeśli chcesz dodać katalog do zmiennej `PATH` - to może być zrobione poprzez uruchomienie `export PATH=$PATH:/home/swaroop/mydir` gdzie `'/home/swaroop/mydir'` jest katalogiem który chcę dodać do zmiennej `PATH`

Ta metoda jest bardzo pomocna jeśli chcesz pisać komendy kiedykolwiek i gdziekolwiek. To jest jak stworzenie twojej własnej komendy `d` lub innej, którą używasz w terminalu.

## Uzyskiwanie Pomocy

Jeśli potrzebujesz szybkiej informacji o jakiejś funkcji lub wyrażeniu w Pythonie, możesz użyć wbudowanej funkcjonalnośc `help`. To jest bardzo pomocne szczególnie kiedy używamy interpretera. Np. uruchom `help(print)` - wyświetli to pomoc dla funkcji print, która jest używana do wyświetlania rzeczy na ekranie.

Uwaga

:   Naciśnij `q` aby wyjść z trybu pomocy.
Podobnie, możesz uzyskać informacje o prawie wszystkim w Pythonie. Użyj `help()` aby naczyć się samodzielnie więcej o `pomocy`!

W przypadku gdzy potrzrebujesz uzyskać pomoc o operatorach jak `return`, musisz użyć cudzysłowów np. `help('retur')`. W ten sposób Python będzie wiedział zamierzamy zrobić.

## Podsumowanie

Powinieneś być teraz w stanie z łątwością napisać, zapisać i uruchomić program Pythona. 

Teraz gdy jesteś użytkownikiem Pythona, nauczmy się trochę więcej o koncepcjach Pythona.
